<%-include("../../views/partials/admin/header")%>
<%-include("../../views/partials/admin/sidebar", { activePage: 'add-products' } )%>

<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
  <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
</head>

<style>
  /* Body background and typography */
  body {
    background-color: #f5f5f5;
    font-family: 'Arial', sans-serif;
    color: #333;
    margin: 0;
    padding: 0;
  }
  /* Main content area with 50px left margin */
  .content-main {
    margin-left: 50px;
    margin-top: 20px;
    margin-right: 20px;
  }
  /* Card styling for a clean modern look */
  .card {
    border: none;
    border-radius: 8px;
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 20px;
  }
  /* Card header styling */
  .card-header {
    background-color: #f0f0f0;
    border-bottom: 1px solid #e3e3e3;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    padding: 10px 15px;
    font-weight: 600;
  }
  /* Card body padding */
  .card-body {
    padding: 20px;
  }
  /* Section header */
  .content-header h2 {
    font-weight: 600;
    color: #444;
    margin-bottom: 20px;
  }
  /* Labels */
  .form-label {
    font-weight: 600;
    margin-bottom: 6px;
    color: #555;
  }
  /* Inputs & selects with a light-gray background */
  .form-control,
  .form-select {
    background-color: #f7f7f7;
    border: 1px solid #ccc;
    border-radius: 4px;
    color: #333;
    transition: border-color 0.3s ease;
  }
  .form-control:focus,
  .form-select:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 1px #3498db;
  }
  /* Error messages */
  .error-message {
    color: #e74c3c;
    font-size: 0.9em;
    margin-top: 5px;
  }
  /* Thumbnails container with gap */
  .thumbnails-container {
    display: flex;
    overflow-x: auto;
    gap: 10px;
  }
  .thumbnail {
    margin-right: 10px;
  }
  /* Button styling */
  .btn {
    border-radius: 4px;
    border: none;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.3s ease;
  }
  /* "Publish" button */
  .btn.btn-md.rounded.font-sm.hover-up {
    background-color: #3498db;
    color: #fff;
    padding: 10px 20px;
    font-size: 0.95rem;
  }
  .btn.btn-md.rounded.font-sm.hover-up:hover {
    background-color: #2980b9;
  }
  /* "Save" buttons for image cropper */
  #saveButton1,
  #saveButton2,
  #saveButton3,
  #saveButton4 {
    background-color: #4caf50;
    color: #fff;
    border: none;
    margin-left: 10px;
    padding: 6px 12px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.85rem;
  }
  #saveButton1:hover,
  #saveButton2:hover,
  #saveButton3:hover,
  #saveButton4:hover {
    background-color: #43a047;
  }
  /* Spacing between form groups */
  .mb-4 {
    margin-bottom: 1.5rem !important;
  }
  /* Adjust spacing within the rows */
  .row > .col-lg-4,
  .row > .col-sm-6 {
    margin-bottom: 1rem;
  }
  /* Slightly reduce the margin for the image preview sections */
  .card-body.align-items-center {
    margin-bottom: 15px;
  }
  /* NEW: Final cropped image styling */
  .final-cropped {
    display: none;
    margin-left: 10px;
    max-width: 120px; /* adjust as needed */
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  .thumbnail {
  position: relative;   /* So the remove icon can be positioned relative to this box */
  display: inline-block;
  margin: 5px;          /* Some spacing between thumbnails */
}

.remove-icon {
  position: absolute;   /* Place in top-right corner of the .thumbnail */
  top: -5px;
  right: -5px;
  background: #e74c3c;
  color: #fff;
  border-radius: 50%;
  padding: 2px 6px;
  cursor: pointer;
  z-index: 9999;        /* Ensure the icon is on top and clickable */
}

</style>

<section class="content-main">
  <div class="row">
    <div class="col-9">
      <div class="content-header">
        <h2 class="content-title">Add New Product</h2>
      </div>
    </div>
    <div class="col-lg-6">
      <div class="card mb-4">
        <div class="card-body">
          <form method="post" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()">
            <!-- Product fields remain unchanged -->
            <div class="mb-4">
              <label for="product_name" class="form-label">Product Name</label>
              <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
              <div id="productName-error" class="error-message"></div>
            </div>
            <div class="col-lg-4 mb-4">
              <label class="form-label">Brand</label>
              <select class="form-select border" name="brand">
                <% for(let i=0; i<brand.length; i++){ %>
                <option value="<%=brand[i].brandName%>">
                    <%=brand[i].brandName%>
                </option>
                <% } %>
              </select>
              <div id="brand-error" class="error-message"></div>
            </div>
            <div class="mb-4">
              <label class="form-label">Full description</label>
              <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
              <div id="description-error" class="error-message"></div>
            </div>
            <div class="row">
              <div class="col-lg-4">
                <div class="mb-4">
                  <label class="form-label">Regular price</label>
                  <input placeholder="₹" name="regularPrice" type="text" class="form-control border">
                  <div id="regularPrice-error" class="error-message"></div>
                </div>
              </div>
              <div class="col-lg-4">
                <div class="mb-4">
                  <label class="form-label">Sale price</label>
                  <input placeholder="₹" name="salePrice" type="text" class="form-control border">
                </div>
                <div id="salePrice-error" class="error-message"></div>
              </div>
              <div class="col-lg-4">
                <div class="mb-4">
                  <label class="form-label">Quantity</label>
                  <input placeholder="" name="quantity" type="text" class="form-control border">
                  <div id="quantity-error" class="error-message"></div>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-lg-4">
                <div class="mb-4">
                  <label class="form-label">Color</label>
                  <input name="color" type="text" class="form-control border">
                </div>
                <div id="color-error" class="error-message"></div>
              </div>
            </div>
            <div class="card mb-4">
              <div class="card-body">
                <div class="row gx-2">
                  <div class="col-sm-6 mb-3">
                    <label class="form-label">Category</label>
                    <select class="form-select border" style="width: 150px;" name="category">
                        <% for(let i=0; i<cat.length; i++){ %>
                      <option value="<%=cat[i].name%>">
                        <%=cat[i].name%>
                      </option>
                      <% } %>
                    </select>
                    <div id="category-error" class="error-message"></div>
                  </div>
                </div>
              </div>
            </div>
            <div class="card mb-2">
              <div class="card-header">
                <h4>Choose images</h4>
              </div>
              <div class="border row">
                <div id="addedImagesContainer" class="thumbnails-container"></div>
              </div>
              <!-- IMAGE 1 -->
              <div class="row">
                <div class="card-body align-items-center">
                  <img src="" alt="" id="imgView1">
                  <!-- NEW: Final cropped image element -->
                  <img src="" alt="" id="finalCropped1" class="final-cropped">
                  <input class="form-control" type="file" name="images" id="input1" 
                         accept="image/png, image/jpeg, image/jpg" 
                         onchange="viewImage1(event), viewImage(event, 1)">
                  <div id="images-error" class="error-message"></div>
                </div>
                <div class="image-cropper d-flex align-items-center" 
                     style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                  <img src="" id="croppedImg1" alt="">
                  <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                </div>
              </div>
              <!-- IMAGE 2 -->
              <div class="row">
                <div class="card-body align-items-center">
                  <img src="" alt="" id="imgView2">
                  <img src="" alt="" id="finalCropped2" class="final-cropped">
                  <input class="form-control" type="file" name="images" id="input2" 
                         accept="image/png, image/jpeg, image/jpg" 
                         onchange="viewImage2(event), viewImage(event, 2)">
                </div>
                <div class="image-cropper d-flex align-items-center" 
                     style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                  <img src="" id="croppedImg2" alt="">
                  <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                </div>
              </div>
              <!-- IMAGE 3 -->
              <div class="row">
                <div class="card-body align-items-center">
                  <img src="" alt="" id="imgView3">
                  <img src="" alt="" id="finalCropped3" class="final-cropped">
                  <input class="form-control" type="file" name="images" id="input3" 
                         accept="image/png, image/jpeg, image/jpg" 
                         onchange="viewImage3(event), viewImage(event, 3)">
                </div>
                <div class="image-cropper d-flex align-items-center" 
                     style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                  <img src="" id="croppedImg3" alt="">
                  <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                </div>
              </div>
              <!-- IMAGE 4 -->
              <div class="row">
                <div class="card-body align-items-center">
                  <img src="" alt="" id="imgView4">
                  <img src="" alt="" id="finalCropped4" class="final-cropped">
                  <input class="form-control" type="file" name="images" id="input4" 
                         accept="image/png, image/jpeg, image/jpg" 
                         onchange="viewImage4(event), viewImage(event, 4)">
                </div>
                <div class="image-cropper d-flex align-items-center" 
                     style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                  <img src="" id="croppedImg4" alt="">
                  <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
                </div>
              </div>
            </div>
            <div>
              <button class="btn btn-md rounded font-sm hover-up" type="button" onclick="validateAndSubmit()">Publish</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<%- include("../../views/partials/admin/footer") %>

<script>
    function validateAndSubmit(){
        if(validateForm()){
            document.forms[0].submit();
        }
    }

    function viewImage1(event){
        document.getElementById("imgView1").src = URL.createObjectURL(event.target.files[0]);
    }
    function viewImage2(event){
        document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0]);
    }
    function viewImage3(event){
        document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0]);
    }
    function viewImage4(event){
        document.getElementById("imgView4").src = URL.createObjectURL(event.target.files[0]);
    }

    function viewImage(event, index) {
      const input = event.target;
      if (!input.files || input.files.length === 0) return;
      const file = input.files[0];

      const reader = new FileReader();
      reader.onload = function () {
        const dataUrl = reader.result;
        // Use the preview image element for cropping
        const image = document.getElementById("imgView" + index);
        image.src = dataUrl;

        // Wait for the image to fully load before initializing Cropper
        image.onload = function () {
          if (image.cropper) {
            image.cropper.destroy();
          }
          const cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true
          });

          const cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
          cropperContainer.style.display = "block";

          // Remove previous event listeners by replacing the node
          let saveButton = document.getElementById("saveButton" + index);
          let newSaveButton = saveButton.cloneNode(true);
          saveButton.parentNode.replaceChild(newSaveButton, saveButton);

          newSaveButton.addEventListener("click", function () {
            const croppedCanvas = cropper.getCroppedCanvas();
            if (!croppedCanvas) {
              console.error("Cropped canvas not available.");
              return;
            }
            // Do NOT overwrite the original preview (imgViewX)
            // Instead, update the final cropped image element
            const finalCropped = document.getElementById("finalCropped" + index);
            finalCropped.src = croppedCanvas.toDataURL("image/jpeg", 1.0);
            finalCropped.style.display = "inline";

            const timestamp = new Date().getTime();
            const filename = `cropped-img-${timestamp}-${index}.png`;

            croppedCanvas.toBlob(blob => {
              if (blob) {
                const fileInput = document.getElementById("input" + index);
                const imgFile = new File([blob], filename, { type: blob.type });
                const fileList = new DataTransfer();
                fileList.items.add(imgFile);
                fileInput.files = fileList.files;
              }
            }, "image/png");

            cropper.destroy();
            cropperContainer.style.display = "none";
          });
        };
      };
      reader.readAsDataURL(file);
    }

    const selectedImages = [];
    document.getElementById("input1").addEventListener("change", handleFileSelect);
    document.getElementById("input2").addEventListener("change", handleFileSelect);
    document.getElementById("input3").addEventListener("change", handleFileSelect);
    document.getElementById("input4").addEventListener("change", handleFileSelect);

    function handleFileSelect(event){
      const addedImagesContainer = document.getElementById("addedImagesContainer");
      addedImagesContainer.innerHTML = "";
      const files = event.target.files;

      for(let i = 0; i < files.length; i++){
        const file = files[i];
        selectedImages.push(file);
        const thumbnail = document.createElement("div");
        thumbnail.classList.add("thumbnail");

        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        img.alt = "thumbnail";
        img.style.width = "50px";
        img.style.height = "auto";
        const removeIcon = document.createElement("span");
        removeIcon.classList.add("remove-icon");
        removeIcon.innerHTML = "&times;";
        removeIcon.addEventListener("click", function(){
          const index = selectedImages.indexOf(file);
          if(index !== -1){
            selectedImages.splice(index, 1);
          }
          thumbnail.remove();
        });

        thumbnail.appendChild(img);
        thumbnail.appendChild(removeIcon);
        addedImagesContainer.appendChild(thumbnail);
      }
    }

    function validateForm() {
      clearErrorMessages();
      const name = document.getElementsByName('productName')[0].value;
      const description = document.getElementById('descriptionid').value;
      const brand = document.getElementsByName('brand')[0].value;
      const price = document.getElementsByName('regularPrice')[0].value;
      const saleprice = document.getElementsByName('salePrice')[0].value;
      const color = document.getElementsByName('color')[0].value;
      const category = document.getElementsByName('category')[0].value;
      const images = document.getElementById('input1');
      const quantity = document.getElementsByName('quantity')[0]
        ? document.getElementsByName('quantity')[0].value
        : "";
      let isValid = true;

      if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
      } else if (!/^[a-zA-Z0-9\s]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters, numbers, or spaces.');
        isValid = false;
      }

      if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
      } else if (!/^[a-zA-Z\s]+$/.test(description.trim())) {
        displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
        isValid = false;
      }

      if (parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
        isValid = false;
      }

      if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
      }

      if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
      }

      if (parseFloat(price) <= parseFloat(saleprice)) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
      }

      if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
      }

      if (images.files.length === 0) {
        displayErrorMessage("images-error", 'Please select an image.');
        isValid = false;
      }

      return isValid;
    }

    function displayErrorMessage(elementId, message) {
      var errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }

    function clearErrorMessages() {
      const errorElements = document.getElementsByClassName('error-message');
      Array.from(errorElements).forEach(element => {
          element.innerText = '';
      });
      const errorMessage = document.getElementById('errorMessage');
    }

    // SweetAlert popup for product add success
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('success') === 'true') {
      Swal.fire({
        title: 'Product added successfully!',
        text: 'Your product has been saved to the database.',
        icon: 'success',
        confirmButtonText: 'OK'
      });
    }

</script>
