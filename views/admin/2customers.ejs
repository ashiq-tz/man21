<%- include("../../views/partials/admin/header") %>
<%- include("../../views/partials/admin/sidebar", { activePage: 'users' } ) %>

<style>
    * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
}

body {
  background-color: #fafbff;
}

/* Header styles */
header {
  background-color: white;
  padding: 22px 70px;
  display: flex;
  justify-content: center;
  align-items: center;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
}

.logo-nav {
  display: flex;
  align-items: center;
}

.logo {
  font-size: 24px;
  font-weight: 700;
  text-decoration: none;
  color: black;
  letter-spacing: 0.72px;
  margin-right: 48px;
}

nav {
  display: flex;
  gap: 48px;
}

nav a {
  text-decoration: none;
  color: black;
  font-size: 16px;
}

.search-container {
  flex: 1;
  display: flex;
  justify-content: flex-end;
}

.search-box {
  background-color: #f5f5f5;
  border-radius: 5px;
  padding: 7px 20px;
  display: flex;
  align-items: center;
  min-width: 300px;
}

.search-box input {
  border: none;
  background: transparent;
  outline: none;
  width: 100%;
  opacity: 0.5;
}

.search-box button {
  background: none;
  border: none;
  cursor: pointer;
}

/* Main container styles */
.main-container {
  display: flex;
  margin-left: 13px;
  margin-top: 52px;
  gap: 20px;
}

/* Sidebar styles */
.sidebar {
  display: flex;
  flex-direction: column;
  padding-bottom: 20px;
  min-width: 200px;
}

.menu-header {
  color: #3858D6;
  font-size: 11px;
  font-weight: normal;
  opacity: 0.5;
  letter-spacing: 1px;
  margin-bottom: 35px;
}

.menu-header.others {
  margin-top: 80px;
}

.sidebar-item {
  display: flex;
  align-items: center;
  gap: 9px;
  text-decoration: none;
  color: #8B8E99;
  font-size: 12px;
  font-weight: 500;
  letter-spacing: 0.5px;
  padding: 10px 17px;
  margin-bottom: 10px;
}

.sidebar-item.active {
  background-color: #8B8E99;
  color: #3858D6;
  border-radius: 5px;
}

.sidebar-item svg {
  min-width: 23px;
}

/* Main content styles */
main {
  flex: 1;
  padding-right: 20px;
}

/* Users header styles */
.users-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.users-header h1 {
  color: #DB4444;
  font-size: 28px;
  font-weight: 500;
}

.actions {
  display: flex;
  gap: 16px;
}

.export-btn, .add-user-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px 16px;
  border-radius: 4px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
}

.export-btn {
  background-color: white;
  border: 1px solid #DB4444;
  color: #DB4444;
}

.add-user-btn {
  background-color: #DB4444;
  border: none;
  color: white;
}

/* Customers container styles */
.customers-container {
  background-color: white;
  border-radius: 30px;
  padding: 26px 18px 45px 18px;
  box-shadow: 0px 10px 60px rgba(226, 236, 249, 0.5);
}

.customers-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 63px;
}

.customers-header h2 {
  font-size: 22px;
  font-weight: 600;
  letter-spacing: -0.22px;
}

.active-members {
  color: #16C098;
  font-size: 14px;
  margin-top: 7px;
}

.filters {
  display: flex;
  gap: 16px;
}

.search-filter {
  display: flex;
  align-items: center;
  background-color: #F9FBFF;
  border-radius: 10px;
  padding: 7px 8px;
}

.search-filter button {
  background: none;
  border: none;
  cursor: pointer;
}

.search-filter input {
  border: none;
  background: transparent;
  outline: none;
  color: #B5B7C0;
  font-size: 12px;
}

.sort-filter {
  display: flex;
  align-items: center;
  background-color: #F9FBFF;
  border-radius: 10px;
  padding: 10px 14px;
  font-size: 12px;
  color: #7E7E7E;
  gap: 7px;
}

.sort-filter span strong {
  color: #3D3C42;
}

.sort-filter button {
  background: none;
  border: none;
  cursor: pointer;
}

/* Table styles */
.customers-table {
  width: 100%;
  border-collapse: collapse;
}

.customers-table th {
  text-align: left;
  color: #B5B7C0;
  font-size: 14px;
  font-weight: 500;
  letter-spacing: -0.14px;
  padding-bottom: 20px;
}

.customers-table th:last-child {
  text-align: right;
}

.customers-table td {
  padding: 20px 0;
  font-size: 14px;
  font-weight: 500;
  color: #292D32;
  letter-spacing: -0.14px;
  border-bottom: 1px solid #EEEEEE;
}

.status-badge {
  display: inline-block;
  padding: 4px 12px;
  border-radius: 4px;
  font-size: 14px;
  font-weight: 500;
}

.status-active {
  background-color: rgba(22, 192, 152, 0.38);
  color: #008767;
  border: 1px solid #00B087;
}

.status-blocked {
  background-color: #FFC5C5;
  color: #DF0404;
  border: 1px solid #DF0404;
}

.action-buttons {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
}

.action-btn {
  background: none;
  border: none;
  cursor: pointer;
}

/* Pagination styles */
.pagination {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 24px;
}

.pagination-info {
  color: #B5B7C0;
  font-size: 14px;
}

.pagination-controls {
  display: flex;
  align-items: center;
  gap: 12px;
}

.page-btn {
  width: 25px;
  height: 25px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #F5F5F5;
  border: 1px solid #EEEEEE;
  border-radius: 4px;
  cursor: pointer;
  font-size: 12px;
  color: #404B52;
}

.page-btn.active {
  background-color: #DB4444;
  border-color: #DB4444;
  color: white;
}

.page-btn.prev, .page-btn.next {
  width: auto;
  padding: 0 9px;
}

@media (max-width: 1024px) {
  header {
    padding: 22px 20px;
  }
  
  .main-container {
    flex-direction: column;
  }
  
  .sidebar {
    width: 100%;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 10px;
  }
  
  .menu-header {
    width: 100%;
  }
  
  .sidebar-item {
    margin-bottom: 0;
  }
  
  .customers-container {
    margin-top: 20px;
  }
  
  .filters {
    flex-direction: column;
  }
  
  .customers-table {
    display: block;
    overflow-x: auto;
  }
  
  .pagination {
    flex-direction: column;
    gap: 20px;
  }
}

</style>

<main>
        <section class="users-header">
          <h1>Users</h1>
          <div class="actions">
            <button class="export-btn">
              <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M14 10V12.6667C14 13.0203 13.8595 13.3594 13.6095 13.6095C13.3594 13.8595 13.0203 14 12.6667 14H3.33333C2.97971 14 2.64057 13.8595 2.39052 13.6095C2.14048 13.3594 2 13.0203 2 12.6667V10" stroke="#DB4444" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M4.66699 6.66667L8.00033 10L11.3337 6.66667" stroke="#DB4444" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M8 10V2" stroke="#DB4444" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              Export
            </button>
            <button class="add-user-btn">
              <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M8 3.33334V12.6667" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M3.33301 8H12.6663" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              Add New User
            </button>
          </div>
        </section>

        <section class="customers-container">
          <div class="customers-header">
            <div>
              <h2>All Customers</h2>
              <p class="active-members">Active Members</p>
            </div>
            <div class="filters">
              <div class="search-filter">
                <button>
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M11 19C15.4183 19 19 15.4183 19 11C19 6.58172 15.4183 3 11 3C6.58172 3 3 6.58172 3 11C3 15.4183 6.58172 19 11 19Z" stroke="#B5B7C0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M21 21L16.65 16.65" stroke="#B5B7C0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </button>
                <input type="text" placeholder="Search" id="searchInput">
              </div>
              <div class="sort-filter">
                <span>Sort by : <strong id="sortDisplay">Newest</strong></span>
                <button id="sortToggle">
                  <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 3.75V14.25" stroke="#3D3C42" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M3.75 9H14.25" stroke="#3D3C42" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </button>
              </div>
            </div>
          </div>

          <table class="customers-table">
            <thead>
              <tr>
                <th>Customer Name</th>
                <th>ID</th>
                <th>Phone Number</th>
                <th>Email</th>
                <th>Role</th>
                <th>Status</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody id="customersTableBody">
              <!-- Table rows will be inserted by JavaScript -->
            </tbody>
          </table>

          <div class="pagination">
            <div class="pagination-info">
              Showing data 1 to 8 of 256K entries
            </div>
            <div class="pagination-controls">
              <button class="page-btn prev">&lt;</button>
              <button class="page-btn active">1</button>
              <button class="page-btn">2</button>
              <button class="page-btn">3</button>
              <button class="page-btn">4</button>
              <span>...</span>
              <button class="page-btn">40</button>
              <button class="page-btn next">&gt;</button>
            </div>
          </div>
        </section>
      </main>
    </div>

    <!-- <script src="script.js"></script> -->

    <script>
        // Customer data
const customers = [
  {
    id: "001",
    name: "Jane Cooper",
    phone: "(225) 555-0118",
    email: "jane@microsoft.com",
    role: "user",
    status: "active"
  },
  {
    id: "002",
    name: "Floyd Miles",
    phone: "(205) 555-0100",
    email: "floyd@yahoo.com",
    role: "user",
    status: "blocked"
  },
  {
    id: "003",
    name: "Ronald Richards",
    phone: "(302) 555-0107",
    email: "ronald@adobe.com",
    role: "user",
    status: "blocked"
  },
  {
    id: "004",
    name: "Marvin McKinney",
    phone: "(252) 555-0126",
    email: "marvin@tesla.com",
    role: "user",
    status: "active"
  },
  {
    id: "005",
    name: "Jerome Bell",
    phone: "(629) 555-0129",
    email: "jerome@google.com",
    role: "user",
    status: "active"
  },
  {
    id: "006",
    name: "Kathryn Murphy",
    phone: "(406) 555-0120",
    email: "kathryn@microsoft.com",
    role: "user",
    status: "active"
  },
  {
    id: "007",
    name: "Jacob Jones",
    phone: "(208) 555-0112",
    email: "jacob@yahoo.com",
    role: "user",
    status: "active"
  },
  {
    id: "008",
    name: "Kristin Watson",
    phone: "(704) 555-0127",
    email: "kristin@facebook.com",
    role: "user",
    status: "blocked"
  }
];

// DOM Elements
const customersTableBody = document.getElementById('customersTableBody');
const searchInput = document.getElementById('searchInput');
const sortToggle = document.getElementById('sortToggle');
const sortDisplay = document.getElementById('sortDisplay');
const paginationButtons = document.querySelectorAll('.page-btn');

// State
let currentPage = 1;
let sortBy = 'newest'; // 'newest' or 'oldest'
let filteredCustomers = [...customers];

// Initialize
document.addEventListener('DOMContentLoaded', () => {
  renderCustomerTable(filteredCustomers);
  setupEventListeners();
});

// Event listeners
function setupEventListeners() {
  // Search functionality
  searchInput.addEventListener('input', handleSearch);
  
  // Sort toggle
  sortToggle.addEventListener('click', toggleSort);
  
  // Pagination
  paginationButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      if (button.classList.contains('prev')) {
        if (currentPage > 1) currentPage--;
      } else if (button.classList.contains('next')) {
        if (currentPage < 40) currentPage++;
      } else {
        const page = parseInt(button.textContent);
        if (!isNaN(page)) currentPage = page;
      }
      updatePaginationUI();
    });
  });
}

// Handle search
function handleSearch(e) {
  const searchTerm = e.target.value.toLowerCase();
  
  filteredCustomers = customers.filter(customer => 
    customer.name.toLowerCase().includes(searchTerm) ||
    customer.email.toLowerCase().includes(searchTerm) ||
    customer.phone.includes(searchTerm)
  );
  
  renderCustomerTable(filteredCustomers);
}

// Toggle sort
function toggleSort() {
  sortBy = sortBy === 'newest' ? 'oldest' : 'newest';
  sortDisplay.textContent = sortBy === 'newest' ? 'Newest' : 'Oldest';
  
  // In a real app, we would sort by date created
  // For this demo, we'll reverse the array to simulate sorting
  filteredCustomers = [...filteredCustomers].reverse();
  
  renderCustomerTable(filteredCustomers);
}

// Update pagination UI
function updatePaginationUI() {
  paginationButtons.forEach(button => {
    if (!button.classList.contains('prev') && !button.classList.contains('next')) {
      const buttonPage = parseInt(button.textContent);
      if (!isNaN(buttonPage)) {
        if (buttonPage === currentPage) {
          button.classList.add('active');
        } else {
          button.classList.remove('active');
        }
      }
    }
  });
}

// Render customer table
function renderCustomerTable(customers) {
  customersTableBody.innerHTML = '';
  
  if (customers.length === 0) {
    const emptyRow = document.createElement('tr');
    emptyRow.innerHTML = `<td colspan="7" style="text-align: center;">No customers found</td>`;
    customersTableBody.appendChild(emptyRow);
    return;
  }
  
  customers.forEach(customer => {
    const row = document.createElement('tr');
    
    row.innerHTML = `
      <td>${customer.name}</td>
      <td>${customer.id}</td>
      <td>${customer.phone}</td>
      <td>${customer.email}</td>
      <td>${customer.role}</td>
      <td>
        <span class="status-badge status-${customer.status}">
          ${customer.status === 'active' ? 'Active' : 'Blocked'}
        </span>
      </td>
      <td>
        <div class="action-buttons">
          <button class="action-btn edit-btn" data-id="${customer.id}">
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M8 13.3333H14" stroke="#B5B7C0" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M11 2.33333C11.2652 2.06812 11.6249 1.91913 12 1.91913C12.1857 1.91913 12.3696 1.95571 12.5412 2.02684C12.7128 2.09797 12.8687 2.20208 13 2.33333C13.1313 2.46459 13.2354 2.62051 13.3065 2.7921C13.3776 2.96369 13.4142 3.14761 13.4142 3.33333C13.4142 3.51906 13.3776 3.70298 13.3065 3.87457C13.2354 4.04616 13.1313 4.20208 13 4.33333L4.66667 12.6667L2 13.3333L2.66667 10.6667L11 2.33333Z" stroke="#B5B7C0" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
          <button class="action-btn view-btn" data-id="${customer.id}">
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0.666656 8.00004C0.666656 8.00004 3.33332 2.66671 7.99999 2.66671C12.6667 2.66671 15.3333 8.00004 15.3333 8.00004C15.3333 8.00004 12.6667 13.3334 7.99999 13.3334C3.33332 13.3334 0.666656 8.00004 0.666656 8.00004Z" stroke="#B5B7C0" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M8 10C9.10457 10 10 9.10457 10 8C10 6.89543 9.10457 6 8 6C6.89543 6 6 6.89543 6 8C6 9.10457 6.89543 10 8 10Z" stroke="#B5B7C0" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
          <button class="action-btn delete-btn" data-id="${customer.id}">
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M2 4H3.33333H14" stroke="#B5B7C0" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M5.33334 4.00004V2.66671C5.33334 2.31309 5.47381 1.97395 5.7239 1.72391C5.97399 1.47385 6.31312 1.33337 6.66668 1.33337H9.33334C9.6869 1.33337 10.026 1.47385 10.2761 1.72391C10.5262 1.97395 10.6667 2.31309 10.6667 2.66671V4.00004M12.6667 4.00004V13.3334C12.6667 13.687 12.5262 14.0261 12.2761 14.2762C12.026 14.5263 11.6869 14.6667 11.3333 14.6667H4.66668C4.31311 14.6667 3.97397 14.5263 3.72392 14.2762C3.47387 14.0261 3.33334 13.687 3.33334 13.3334V4.00004H12.6667Z" stroke="#B5B7C0" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M6.66666 7.33337V11.3334" stroke="#B5B7C0" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M9.33334 7.33337V11.3334" stroke="#B5B7C0" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
        </div>
      </td>
    `;
    
    customersTableBody.appendChild(row);
  });
  
  // Setup action button event listeners
  setupActionButtons();
}

// Setup action button listeners
function setupActionButtons() {
  // Edit buttons
  document.querySelectorAll('.edit-btn').forEach(button => {
    button.addEventListener('click', () => {
      const customerId = button.getAttribute('data-id');
      alert(`Edit customer with ID: ${customerId}`);
    });
  });
  
  // View buttons
  document.querySelectorAll('.view-btn').forEach(button => {
    button.addEventListener('click', () => {
      const customerId = button.getAttribute('data-id');
      alert(`View customer with ID: ${customerId}`);
    });
  });
  
  // Delete buttons
  document.querySelectorAll('.delete-btn').forEach(button => {
    button.addEventListener('click', () => {
      const customerId = button.getAttribute('data-id');
      if (confirm(`Are you sure you want to delete customer with ID: ${customerId}?`)) {
        // In a real app, we would delete from the server
        filteredCustomers = filteredCustomers.filter(c => c.id !== customerId);
        renderCustomerTable(filteredCustomers);
      }
    });
  });
}

    </script>


  </body>
</html>