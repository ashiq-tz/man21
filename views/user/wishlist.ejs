<%- include("../partials/user/header") %>

<style>
  .wishlist-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 40px 20px;
  }
  .wishlist-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
  }
  .wishlist-header h2 {
    font-size: 24px;
    font-weight: 600;
    text-transform: uppercase;
  }
  .wishlist-header button {
    background-color: #000;
    color: #fff;
    text-transform: uppercase;
    font-weight: 600;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
  }
  .wishlist-header button:hover {
    background-color: #444;
  }
  /* Grid for wishlist items */
  .wishlist-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    gap: 20px;
  }
  .wishlist-item {
    border: 1px solid #ddd;
    padding: 15px;
    position: relative;
    text-align: center;
    transition: box-shadow 0.3s ease;
    background-color: #fff;
  }
  .wishlist-item:hover {
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  .discount-badge {
    position: absolute;
    top: 15px;
    left: 15px;
    background-color: #f00;
    color: #fff;
    padding: 4px 6px;
    font-size: 12px;
    font-weight: 600;
    border-radius: 4px;
  }
  .wishlist-item img {
    width: 100%;
    height: 180px;
    object-fit: cover;
    margin-bottom: 10px;
  }
  .wishlist-item h4 {
    font-size: 16px;
    font-weight: 600;
    margin-bottom: 5px;
  }
  .wishlist-item .price-section {
    margin-bottom: 10px;
  }
  .wishlist-item .price-section .sale-price {
    font-size: 18px;
    font-weight: 600;
    color: #000;
  }
  .wishlist-item .price-section .regular-price {
    font-size: 14px;
    text-decoration: line-through;
    color: #888;
    margin-left: 8px;
  }
  .wishlist-actions {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: 10px;
  }
  .wishlist-actions button {
    flex: 1;
    border: none;
    padding: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 600;
  }
  .add-to-cart-btn {
    background-color: #000;
    color: #fff;
  }
  .add-to-cart-btn:hover {
    background-color: #444;
  }
  .remove-btn {
    background-color: #ccc;
    color: #000;
  }
  .remove-btn:hover {
    background-color: #999;
  }
  .size-box:hover {
  background-color: #000000;
  color: #fff;
}

</style>

<div class="wishlist-container">
  <div class="wishlist-header">
    <h2>My Wishlist (<%= totalItems %>)</h2>
    <!-- "Move All To Cart" button -->
    <button onclick="removeAllWishlist()">Remove All</button>
  </div>

  <!-- Wishlist Grid -->
  <div class="wishlist-grid">
    <% if(wishlistItems && wishlistItems.length > 0) { %>
      <% wishlistItems.forEach((item) => { %>
        <div class="wishlist-item">
          <% if(item.regularPrice > item.salePrice) { 
               let discountPercent = Math.round(
                 ((item.regularPrice - item.salePrice) / item.regularPrice) * 100
               );
          %>
            <div class="discount-badge">
              -<%= discountPercent %>%
            </div>
          <% } %>

          <a href="/product/<%= item._id %>">
          <img 
            src="/uploads/product-images/<%= item.productImage && item.productImage.length 
                  ? item.productImage[0] 
                  : 'placeholder.jpg' %>" 
            alt="<%= item.productName %>"
          />
        </a>
          <h4><%= item.productName %></h4>
          <div class="price-section">
            <span class="sale-price">₹<%= item.salePrice.toLocaleString('en-IN') %></span>
            <% if(item.regularPrice > item.salePrice) { %>
              <span class="regular-price">₹<%= item.regularPrice.toLocaleString('en-IN') %></span>
            <% } %>
          </div>
          <div class="wishlist-actions">
            <!-- Add to Cart button -->
            <%const variantsJson = JSON.stringify(item.variants || []);%>
            <button
              class="add-to-cart-btn"
              onclick='promptSizeForWishlist("<%= item._id %>", <%- variantsJson %>)'
            >
              Add to Cart
            </button>
            
            
            <!-- Remove button with confirmation -->
            <button class="remove-btn" onclick="confirmRemove('<%= item._id %>')">
              Remove
            </button>
          </div>
        </div>
      <% }) %>
    <% } else { %>
      <p>Your wishlist is empty.</p>
    <% } %>
  </div>
</div>
<!-- Pagination Navigation -->
<% if (totalPages > 1) { %>
  <nav aria-label="Wishlist pages" class="d-flex justify-content-center">
    <ul class="pagination">
      <% for (let i = 1; i <= totalPages; i++) { %>
        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
          <a class="page-link" href="?page=<%= i %>"><%= i %></a>
        </li>
      <% } %>
    </ul>
  </nav>
<% } %>

<%- include("../partials/user/footer") %>

<script>
  

  // Function to add a single wishlist item to cart without size prompt (if needed)
  function addToCart(itemId) {
    $.ajax({
      url: '/addToCart',
      method: 'POST',
      data: { productId: itemId },
      success: function(response) {
        if(response.success) {
          Swal.fire({
            icon: 'success',
            title: 'Added!',
            text: response.message,
            timer: 1500,
            showConfirmButton: false
          }).then(() => location.reload());
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: response.message
          });
        }
      },
      error: function() {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Something went wrong. Please try again.'
        });
      }
    });
  }

  // Function to confirm removal of an item from the wishlist
  function confirmRemove(itemId) {
    Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to undo this",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, remove it!'
    }).then((result) => {
      if(result.isConfirmed) {
        window.location.href = `/removeFromWishlist?productId=${itemId}`;
      }
    });
  }

  // Function to prompt the user to select a size for the wishlist product.
  // Note: Ensure that each wishlist product has a valid "variants" field.
  function promptSizeForWishlist(productId, variants) {
  // Filter to get only variants with stock > 0
  const inStockVariants = variants.filter(v => v.stock > 0);

  // If no variants are in stock
  if (inStockVariants.length === 0) {
    Swal.fire({
      icon: 'error',
      title: 'Out of Stock',
      text: 'No sizes available for this product.'
    });
    return;
  }

  // Build custom HTML for the row of boxes
  let htmlContent = `
    <div style="text-align: center;">
      <h2 style="font-size: 24px; margin-bottom: 20px;">Select a Size</h2>
      <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 15px; margin-bottom: 20px;">
  `;
  inStockVariants.forEach(variant => {
    htmlContent += `
      <div
        class="size-box"
        data-size="${variant.size}"
        data-stock="${variant.stock}"
        style="
          width: 60px; 
          height: 60px; 
          border: 2px solid #000; 
          display: flex; 
          align-items: center; 
          justify-content: center; 
          cursor: pointer;
        "
      >
        ${variant.size}
      </div>
    `;
  });
  htmlContent += `
      </div>
      <button 
        type="button" 
        id="cancelSizeSelection"
        style="
          background-color: #000; 
          color: #fff; 
          border: none; 
          padding: 8px 16px; 
          cursor: pointer;
          font-weight: 600;
          font-size: 14px;
        "
      >
        Cancel
      </button>
    </div>
  `;

  // Show a SweetAlert2 modal with the custom HTML
  Swal.fire({
    html: htmlContent,
    showConfirmButton: false, // We'll handle "confirm" in JS
    showCancelButton: false,  // Hiding built-in cancel as well
    didOpen: () => {
      // Attach click handlers to each size box
      const sizeBoxes = Swal.getHtmlContainer().querySelectorAll('.size-box');
      sizeBoxes.forEach(box => {
        box.addEventListener('click', () => {
          const size = box.getAttribute('data-size');
          addToCartFromWishlist(productId, size);
          Swal.close();
        });
      });

      // Attach click handler to our custom "Cancel" button
      const cancelBtn = Swal.getHtmlContainer().querySelector('#cancelSizeSelection');
      if (cancelBtn) {
        cancelBtn.addEventListener('click', () => {
          Swal.close(); 
        });
      }
    }
  });
}



  // Function that calls the addToCart endpoint with productId and size, then reloads the page
  function addToCartFromWishlist(productId, size) {
    $.ajax({
      url: '/addToCart',
      method: 'POST',
      data: { productId: productId, size: size },
      success: function(response) {
        if(response.success) {
          Swal.fire({
            icon: 'success',
            title: 'Added to Cart!',
            text: response.message,
            timer: 1500,
            showConfirmButton: false
          }).then(() => location.reload());
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: response.message
          });
        }
      },
      error: function() {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Something went wrong. Please try again.'
        });
      }
    });
  }

  function removeAllWishlist() {
  Swal.fire({
    title: 'Are you sure?',
    text: 'This will remove ALL wishlist items.',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, remove all!',
    cancelButtonText: 'No, cancel'
  }).then((result) => {
    if (result.isConfirmed) {
      $.ajax({
        url: '/removeAllWishlist',
        method: 'POST',
        success: function(response) {
          Swal.fire({
            icon: 'success',
            title: 'Removed!',
            text: response.message,
            timer: 1500,
            showConfirmButton: false
          }).then(() => location.reload());
        },
        error: function() {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong. Please try again.'
          });
        }
      });
    }
  });
}

</script>




